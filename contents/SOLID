
다형성이란?
(MemberService: 클라이언트, MemberRepository: 서버)
클라이언트 영향 주지 않고 새로운 기능 추가 가능.
Interface를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
유연하고, 변경용이. 확장 가능한 설계. 인터페이스를 안정적으로 잘 설계하는 것이 중요하다.
ㅇ
SOLID 원칙

-SRP: 단일 책임 원칙
한 클래스는 하나의 책임만 가져야 한다. 기준은 변경이 있을 때 파급 효과가 작은 것

-OCP: 개방-폐쇄 원칙
확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
ex. Interface 구현 클래스 하나 더 만들어서 새로운 기능 구현

-LSP: 리스코프 치환 원칙
자료형 S가 T의 하위형이라면 자료형 T의 객체를 S의 객체로 치환 가능
ex. 하위 클래스는 상위 클래스의 한 종류, 인터페이스는 구현 클래스는 인터페이스 규약 지켜야 한다

-ISP: 인터페이스 분리 원칙
인터페이스가 명확해지고, 대체 가능성 높아진다

-DIP: 의존관계 역전 원칙
구현 클래스에 의존하지 말고, 추상화에 의존해야한다 그렇지 않으면 변경이 번거롭다

