[싱글톤 패턴]

ex. test폴더에 singletonService 코드 참고
클래스 인스턴스가 딱 1개만 생성.

private선언으로 다른 곳에서 new 방지
static이니까 딱 하나만만
static영역에 객체 instance 미리 하나 생성

"싱글톤 패턴 문제점"

싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
의존관계상 클라이언트가 구체 클래스에 의존한다. DIP를 위반한다.
클라이언트가 구체 클래스에 의존해서 OCP 원칙을 위반할 가능성이 높다.
테스트하기 어렵다.
내부 속성을 변경하거나 초기화 하기 어렵다.
private 생성자로 자식 클래스를 만들기 어렵다.
결론적으로 유연성이 떨어진다.


[컨테이너]
스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다

 ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
 1. 조회: 호출할 때 마다 같은 객체를 반환
 MemberService memberService1 = ac.getBean("memberService", MemberService.class);

 2. 조회: 호출할 때 마다 같은 객체를 반환
 MemberService memberService2 = ac.getBean("memberService", MemberService.class);
1==2



[주의점] - 예제: StatefulService
객체 인스턴스를 하나만 생성해서 공유하는 싱
글톤 방식은 여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 싱글톤 객체는 상태를 유지
(stateful)하게 설계하면 안된다.
Stateless로 설계해야한다.
   - 특정 클라이언트에게 의존적이 필드 x
   - 공유되지 않은 지역변수 등 사용

@Bean만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다. @Configuration이 싱글톤으로
memberRepository() 처럼 의존관계 주입이 필요해서 메서드를 직접 호출할 때 싱글톤을 보장하지 않는다.
