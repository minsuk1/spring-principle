
[IOC(제어의 역전)]
기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고, 실행했다.
반면 AppConfig 후에는 구현 객체는 자신의 로직을 실행하는 역할만 담당.
프로그램의 제어 흐름은 이제 AppConfig가 가져간다. 예를 들어서 OrderServiceImpl 은 필요한 인터페이스들을 호
출하지만 어떤 구현 객체들이 실행될지 모른다.
AppConfig처럼 프로그램 제어 흐름은 외부에서 관리하는 것.

프레임워크(IoC): 프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하느 것(JUnit)
라이브러리: 내가 작성한 코드가 직접 제어의 흐름을 담당하면 라이브러리


[DI]

의존관계는 정적인 클래스 의존관계와 실행 시점(런타임)에 결정되는 동적인 객체 의존 관계로 나뉜다.

정적인 클래스 의존관계: import 코드만 보고 의존관계 파악. ex. implements, extends
동적인 객체 의존 관계: 주문 서비스 구현체 -> FixDiscount / RateDiscount

런타임에 외부에서 실제 구현 객체 생성하고, 클라이언트에 전달해서 의존관계 연결되는 것을 DI.
객체 인스턴스 생성하고, 그 참조값 전달해서 연결한다.
정적인 클래스 의존관계 변경하지 않고, 동적인 객체 인스턴스 의존관계 쉽게 변경 가능하다.


[IoC 컨테이너 = DI 컨테이너]

AppConfig처럼 객체 생성해서 관리하면서 의존관계 연결해주는 것.