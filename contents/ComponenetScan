[스프링 컨테이너]
@Bean 이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다

[스프링 컨테이너+싱글톤]
스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.
지저분한 코드 + DOP/OCP/태스트로 부텅 제한 사항 없다

주의점: 클라이언트는 하나의 객체 인스턴스를 공유하니까 싱글톤 객체 상태를 stateful말고 stateless하게 설계해야한다
ex. StatefulService

[BeanFactory]
스프링 컨테이너의 최상위 인터페이스로 스프링 빈을 관리하고 조회한다. getBean()

[ApplicationContext]
ApplicationContext는 BeanFactory의 기능을 상속받는다
이벤트 발생, 구독 모델 지원 -> 어플리케이션 이벤트
로컬,개발,운영 등 구분해서 처리 -> 환경변수
등 다양한 역할 지원

[컴포넌트 스캔]
일일이 @Bean으로 등록안해도 알아서 bean으로 저장시켜주는 Componenet Scan + 자동 DI: @Autowired

@Component : 컴포넌트 스캔에서 사용
@Controlller : 스프링 MVC 컨트롤러에서 사용
@Service : 스프링 비즈니스 로직에서 사용
@Repository : 스프링 데이터 접근 계층에서 사용

컴포넌트 스캔의 용도 뿐만 아니라 다음 애노테이션이 있으면 스프링은 부가 기능을 수행한다.
@Controller : 스프링 MVC 컨트롤러로 인식
@Repository : 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환해준다.
@Configuration : 앞서 보았듯이 스프링 설정 정보로 인식하고, 스프링 빈이 싱글톤을 유지하도록 추가 처
리를 한다.
@Service : 사실 @Service 는 특별한 처리를 하지 않는다. 대신 개발자들이 핵심 비즈니스 로직이 여기에
있겠구나 라고 비즈니스 계층을 인식하는데 도움이 된다.